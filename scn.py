import json
import sys
import subprocess
import platform
import tarfile
import json
import pkg_resources
import os
import io
import base64

required = {'pandas', 'requests', 'tqdm', 'jinja2==3.1.2', 'matplotlib'}
installed = {pkg.key for pkg in pkg_resources.working_set}
missing = required - installed

if missing:
    print('Installing Dependencies...')
    python = sys.executable
    subprocess.check_call(
        [python, '-m', 'pip', 'install', *missing], stdout=subprocess.DEVNULL)


import matplotlib.pyplot as plt
import pandas as pd
import requests
from tqdm import tqdm


# GLOBALS
accordian_cnt = 0
CONST_reportFile = 'report.html'
CONST_tableAttributes = 'class="table table-striped table-bordered table-hover"'
CONST_targz = ".tar.gz"
CONST_cdac_logo = ''''''


# Exceptions
class DownloadError(Exception):
    """Corrupted Download"""
    pass


def accordian_head(heading):
    global accordian_cnt
    global CONST_reportFile
    with open(CONST_reportFile, 'a') as report:
        report.write(f'''<div class="accordion">
  <div class="accordion-item">
    <h1 class="accordion-header">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse{accordian_cnt}"
        aria-expanded="true" aria-controls="collapse{accordian_cnt}">
        {heading}</button>
    </h1>
    <div id="collapse{accordian_cnt}" class="accordion-collapse collapse show">
      <div class="accordion-body table-responsive">''')
        accordian_cnt += 1


def accordian_tail():
    global CONST_reportFile
    with open(CONST_reportFile, 'a') as report:
        report.write(f'''\n</div>\n</div>\n</div>\n</div>\n<br/>\n''')


def docker_bench_getlist(docker_bench_dict_keys):
    docker_bench_list = []
    for item in val['tests'][i]['results']:
        row = []
        for key in docker_bench_dict_keys:
            value = ''
            if key in item:
                value = item[key]
            row.append(value)
        docker_bench_list.append(row)
    return docker_bench_list


def where(x):
    bg = ['#8B0000', '#FF5607', '#FF9800',
          '#FFEC19', 'lightgreen', 'lightblue', '#FF9800', 'lightblue', 'lightgreen', '#FFEC19']
    fg = ['white', 'black', 'black', 'black', 'black',
          'black', 'black', 'black', 'black', 'black', 'black']
    ls = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'NONE',
          'UNKNOWN', 'WARN', 'INFO', 'PASS', 'NOTE']
    for i, y in enumerate(ls):
        if y in x:
            return f"background-color: {bg[i]} !important; font-weight: bold !important; color: {fg[i]}"
    return ''


def add_checkbox(dataframe):
    dataframe['Check'] = []*dataframe.shape[0]


def write_table(table, heading, description, remediation, os='', fig=None):
    global CONST_reportFile
    imgiobytes = io.BytesIO()
    accordian_head(heading=heading)
    with open(CONST_reportFile, 'a') as report:
        if os != '':
            report.write('<b>OS: </b>' + os + '<br/>\n')
        report.write('<b>Description:</b> <p>' + description + '</p><br/>\n')
        report.write('<b>Remediation: </b>' + remediation + '<br/>\n')

        report.write(table)
        if fig != None:
            fig.savefig(imgiobytes, format='png')
            imgiobytes.seek(0)
            jpgdatabase64 = base64.b64encode(
                imgiobytes.read()).decode('utf-8')
            report.write(
                f'<img src="data:image/png;base64,{jpgdatabase64}"/>')

    accordian_tail()


def write_dockerbench(headings, descriptions):
    global CONST_tableAttributes
    global docker_bench_dict_keys
    docker_bench_list = docker_bench_getlist(docker_bench_dict_keys)

    df = pd.DataFrame(docker_bench_list, columns=[
        'ID', 'DESCRIPTION', 'RESULT', 'DETAILS', 'REMEDIATION', 'REMEDIATION IMPACT'])

    summary = df.groupby('RESULT').size()
    plt.pie(summary, labels=summary.keys(),
            autopct='%1.1f%%',
            shadow=False, startangle=0)
    write_table(df.style.applymap(where, subset=['RESULT']).to_html(table_attributes=CONST_tableAttributes), headings[i], description=descriptions[i],
                remediation='Follow Remediations', fig=plt)
    plt.clf()


# DEFAULT START HTML
with open(CONST_reportFile, 'w') as report:
    report.write(f'''<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
  integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
<header class="masthead">
    <div class="container forbordercontainer">
       <div class="row" style="margin-left: 0 !important;
       margin-right: 0 !important;
       min-height: 77px;
       background: linear-gradient(to right,#383643 0,#444967 55%,#1f1c23 100%);">
          <div class="col-xs-12 col-md-4 hidden-xs" style="padding-top: 10px; padding-bottom: 3px;"> 
          <img src="data:image/png;base64,{CONST_cdac_logo}" alt="C-DAC LOGO">
          </div>
          <div class="col-xs-12 col-md-8" style="padding-top: 10px; padding-bottom: 3px; padding-right: 15px; padding-left: 15px; display: flow-root;">
                <div style="float: right; color: #fff; font-size: 1.6em">
                    Docker Container and Host Vulnerability Assessment
                </div>
          </div>
       </div>
    </div>
</header>
<div style='margin: 2em'>
''')

# HOST SYSTEM ARCH/INFO
system_info = platform.uname()
architecture = platform.architecture()[0]

# VERSION
trivy_version = "0.28.0"
docker_bench_version = "1.3.6"

# DOWNLOAD URLS AND PACKAGE NAMES
dockerbench_url = "https://github.com/docker/docker-bench-security/archive/refs/tags/v" + \
    docker_bench_version + CONST_targz
docker_bench_pkg = "docker-bench-security-" + docker_bench_version + CONST_targz
trivy_url = "https://github.com/aquasecurity/trivy/releases/download/v"+trivy_version + "/"
trivy_pkg = "trivy_" + trivy_version + "_" + \
    system_info.system + "-" + architecture + CONST_targz

# SCANNING STATUS
trivy_done = False
docker_bench_done = False

# GETTING ALL IMAGES
result = subprocess.run(["docker", "images", "-q"],
                        stderr=subprocess.PIPE, stdout=subprocess.PIPE, text=True)
images = result.stdout.split('\n')
images = images[:-1]


# DOCKER BENCH SCANNING
while docker_bench_done == False:
    try:
        print("Scanning using Docker Bench...")
        if not os.path.isfile("docker-bench-security-" +
                              docker_bench_version + '/docker-bench-security.sh'):
            raise FileNotFoundError

        pc = subprocess.Popen(['sudo ./docker-bench-security.sh -p 1'],
                              cwd='./' + 'docker-bench-security-' + docker_bench_version, shell=True)
        pc.wait()
        docker_bench_done = True

    except FileNotFoundError:
        print("Downloading DockerBenchSecurity!")
        try:
            response = requests.get(dockerbench_url, stream=True)
            total_size_in_bytes = int(
                response.headers.get('content-length', 0))
            block_size = 1024  # 1 Kibibyte
            progress_bar = tqdm(total=total_size_in_bytes,
                                unit='iB', unit_scale=True)
            with open(docker_bench_pkg, 'wb') as file:
                for data in response.iter_content(block_size):
                    progress_bar.update(len(data))
                    file.write(data)
            progress_bar.close()
            if total_size_in_bytes != 0 and progress_bar.n != total_size_in_bytes:
                print("ERROR, something went wrong")
                raise DownloadError
            if response.status_code != 200:
                print("Failed To Download Docker Bench")
                raise ConnectionError
            with tarfile.open(docker_bench_pkg) as file:
                def is_within_directory(directory, target):
                    
                    abs_directory = os.path.abspath(directory)
                    abs_target = os.path.abspath(target)
                
                    prefix = os.path.commonprefix([abs_directory, abs_target])
                    
                    return prefix == abs_directory
                
                def safe_extract(tar, path=".", members=None, *, numeric_owner=False):
                
                    for member in tar.getmembers():
                        member_path = os.path.join(path, member.name)
                        if not is_within_directory(path, member_path):
                            raise Exception("Attempted Path Traversal in Tar File")
                
                    tar.extractall(path, members, numeric_owner=numeric_owner) 
                    
                
                safe_extract(file, "./")
        except:
            print("Could not download! Skipping DockerBench")
            docker_bench_done = True

# INFO WE ARE CONCERNED WITH
trivy_dict_keys = ['PkgName', 'InstalledVersion', 'FixedVersion',
                   'VulnerabilityID', 'Title', 'Severity', 'Description']
docker_bench_dict_keys = ['id', 'desc', 'result',
                          'details', 'remediation', 'remediation-impact']


# DOCKER BENCH WRITING REPORT
with open('docker-bench-security-' + docker_bench_version + '/log/docker-bench-security.log.json', 'r') as docker_bench_json:
    val = json.loads(docker_bench_json.read())

headings = ['Host Configuration', 'Docker daemon configuration', 'Docker daemon configuration files',
            'Container Images and Build File', 'Container Runtime', 'Docker Security Operations', 'Docker Swarm Configuration']
descriptions = ['''This section covers security recommendations that you should follow to prepare the host
machine that you plan to use for executing containerized workloads. Securing the Docker
host and following your infrastructure security best practices would build a solid and
secure foundation for executing containerized workloads.''', '''This section lists the recommendations that alter and secure the behavior of the Docker
daemon. The settings that are under this section affect ALL container instances.
Note: Docker daemon options, when running in the default rootful mode, can also be
controlled using files such as /etc/sysconfig/docker, /etc/default/docker, the systemd
unit file or /etc/docker/daemon.json. Also, note that Docker in daemon mode can be
identified as /usr/bin/dockerd, or having -d or daemon as the argument to docker service.
Note: When running in rootless mode does change all configuration file locations and has
some known limitations regarding e.g privileged TCP/UDP ports and specific prerequisites
depending on which distribution that is used.''', '''This section covers Docker related files and directory permissions and ownership. Keeping
the files and directories, that may contain sensitive parameters, secure is important for
correct and secure functioning of Docker daemon.''', '''Container base images and build files govern the fundamentals of how a container instance
from a particular image would behave. Ensuring that you are using proper base images and
appropriate build files can be very important for building your containerized
infrastructure. Below are some of the recommendations that you should follow for
container base images and build files to ensure that your containerized infrastructure is
secure.''', '''There are many security implications associated with the ways that containers are started.
Some runtime parameters can be supplied that have security consequences that could
compromise the host and the containers running on it. It is therefore very important to
verify the way in which containers are started, and which parameters are associated with
them. Container runtime configuration should be reviewed in line with organizational
security policy.''', '''This section covers some of the operational security issues associated with Docker
deployments. These are best practices that should be followed where possible. Most of the
recommendations in this section simply act as reminders that organizations should extend
their current security best practices and policies to include containers.''', '''This section lists the recommendations that alter and secure the behavior of the Docker
Swarm. If you are not using Docker Swarm then the recommendations in this section do
not apply.''']

container = [3, 4]
host = [0, 1, 2, 5, 6]

# WRITING HOST SPECIFIC
accordian_head(heading='Host Specific')

for i in host:
    write_dockerbench(headings=headings, descriptions=descriptions)

accordian_tail()

# WRITING CONTAINER/IMAGE SPECIFIC
accordian_head(heading='Container/Image Specific')

for i in container:
    write_dockerbench(headings=headings, descriptions=descriptions)


# TRIVY SCANNING
for image in images:
    trivy_done = False
    while trivy_done == False:
        try:
            print("Scanning using Trivy...")
            output = subprocess.run(["./trivy", "image", "-f", "json", "-o", "trivy.json", image],
                                    stderr=subprocess.PIPE, text=True)
            trivy_done = True

            vulns_list = []
            val = ''

            # TRIVY WRITING REPORT
            with open('trivy.json', 'r') as trivy_json:
                val = json.loads(trivy_json.read())

            if 'Results' in val:
                for item_m in val['Results']:
                    if 'Vulnerabilities' in item_m:
                        for item in item_m['Vulnerabilities']:
                            row = []
                            for key in trivy_dict_keys:
                                value = ''
                                if key in item:
                                    value = item[key]
                                row.append(value)
                            vulns_list.append(row)

            df = pd.DataFrame(vulns_list, columns=[
                              'NAME', 'INSTALLED VERSION', 'FIXED VERSION', 'VULNERABILITY ID', 'VULNERABILITY', 'SEVERITY', 'DESCRIPTION'])
            summary = df.groupby('SEVERITY').size()
            plt.pie(summary, labels=summary.keys(),
                    autopct='%1.1f%%',
                    shadow=False, startangle=0)
            try:
                write_table(df.style.applymap(where, subset=['SEVERITY']).to_html(table_attributes=CONST_tableAttributes), f'IMAGE_TAG: {val["Metadata"]["RepoTags"][0]} {val["ArtifactType"].upper()}: {val["ArtifactName"]}', 'Following are Vulnerabilities found for the image',
                            'Update/Upgrade the package version to fixed version', f'{val["Metadata"]["OS"]["Family"]} {val["Metadata"]["OS"]["Name"]}', fig=plt)
                plt.clf()
            except KeyError:
                plt.clf()
                print('There was a key error. Skipping image... No Vulns')
                print(
                    f'Image: {val["Metadata"]["RepoTags"]} with ID: {val["ArtifactName"]} Skipped')

        except FileNotFoundError:
            print("Installing Trivy!")
            try:
                response = requests.get(trivy_url + trivy_pkg, stream=True)
                total_size_in_bytes = int(
                    response.headers.get('content-length', 0))
                block_size = 1024  # 1 Kibibyte
                progress_bar = tqdm(total=total_size_in_bytes,
                                    unit='iB', unit_scale=True)
                with open(trivy_pkg, 'wb') as file:
                    for data in response.iter_content(block_size):
                        progress_bar.update(len(data))
                        file.write(data)
                progress_bar.close()
                if total_size_in_bytes != 0 and progress_bar.n != total_size_in_bytes:
                    print("ERROR, something went wrong")
                    raise DownloadError
                if response.status_code != 200:
                    print("Failed To Download Trivy")
                    raise ConnectionError
                with tarfile.open(trivy_pkg) as file:
                    file.extract('trivy', './')
            except:
                print("Could not install trivy! Skipping Trivy")
                trivy_done = True

accordian_tail()

# ENDING REPORT
with open(CONST_reportFile, 'a') as report:
    report.write('\n</div>')
